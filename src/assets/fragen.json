[
  {
    "fragentext": "Im Oracle-Fragenkatalog kommen keine Fill-In-Fragen vor. \n <br> Hier wird zu Demonstrationszwecken beispielhaft eine Fill-In-Frage gestellt. \n <br> Wie heißt das Javascript-Framework, mit dem diese Anwendung entwickelt wurde?",
    "antworten": [
      {"text": "Angular", "correct": false}
    ]
  },
  {
    "fragentext": "Choose the best answer. \n <br> In your session, the NLS_DATE_FORMAT is DD-MM-YYYY. There are 86400 seconds in a day. \n Examine this result: \n <br> DATE \n --- \n 02-JAN-2020",
    "antworten": [
      {"text": "SELECT TO_CHAR(TO_DATE('29-10-2019') + INTERVAL '3'MONTH + INTERVAL '7'DAY –INTERVAL '360' SECOND, 'DD-MM-YYYY') AS \"date\" FROM DUAL;", "correct": false},
      {"text": "SELECT TO_CHAR(TO_DATE('29-10-2019') + INTERVAL '2'MONTH + INTERVAL '5'DAY –INTERVAL '86410' SECOND, 'DD-MM-YYYY') AS \\“date\\” FROM DUAL;", "correct": false},
      {"text": "SELECT TO_CHAR(TO_DATE('29-10-2019') + INTERVAL '2'MONTH + INTERVAL '4'DAY –INTERVAL '120' SECOND, 'DD-MM-YYYY') AS \\“date\\” FROM DUAL;", "correct": false},
      {"text": "SELECT TO_CHAR(TO_DATE('29-10-2019') + INTERVAL '2'MONTH + INTERVAL '6'DAY –INTERVAL '120' SECOND, 'DD-MM-YYYY') AS \\“date\\” FROM DUAL;", "correct": false},
      {"text": "SELECT TO_CHAR(TO_DATE('29-10-2019') + INTERVAL '2'MONTH + INTERVAL '5'DAY –INTERVAL '120' SECOND, 'DD-MM-YYYY') AS \"date\" FROM DUAL;", "correct": true}
    ]
  },
  {
    "fragentext": "Choose the best answer. \n <br> You must find the number of employees whose salary is lower than employee 110. Which statement fails to do this?",
    "antworten": [
      {"text": "SELECT COUNT(*) FROM employees e \n JOIN employees a \n ON e.salary < a.salary \n WHERE a.employee_id=110;", "correct": false},
      {"text": "SELECT COUNT(*) \n FROM employees e \n WHERE e.salary < (SELECT a.salary FROM employees a WHERE \n e.employee_id=110); ", "correct": true},
      {"text": "SELECT COUNT(*) \n FROM employees \n WHERE salary < (SELECT salary FROM employees WHERE employee_id=110);", "correct": false},
      {"text": "SELECT COUNT(*) \n FROM employees e \n JOIN (SELECT salary FROM employees WHERE employee_id=110) a \n ON e.salary < a.salary;", "correct": false}
    ]
  },
  {
    "fragentext": "Examine the Bricks table: \n --- \n | Color | Shape | Weight | \n |---|---|---| \n | red | cube | 5 | \n | red | zylinder | 10 | \n | blue | cube | 15 |  \n | blue | cylinder | 20  | \n---\n You write this query: \n SELECT * \n FROM bricks b1 CROSS JOIN bricks b2 \n WHERE b1.weight < b2.weight; \n---\n How many rows will the query return?",
    "antworten": [
      {"text": "0", "correct": false},
      {"text": "4", "correct": false},
      {"text": "10", "correct": false},
      {"text": "6", "correct": true},
      {"text": "16", "correct": false},
      {"text": "1", "correct": false}
    ]
  },
  {
    "fragentext": "Which two statements are true about Entity Relationships?",
    "antworten": [
      {"text": "A relationship can be mandatory for both entities.", "correct": false},
      {"text": "A table name can be specified just once when selecting data from a table having a selfreferencing relationship.", "correct": true},
      {"text": "A many-to-many relationship can be implemented only using foreign keys.", "correct": false},
      {"text": "A one-to-many relationship in one direction is a one-to-one relationship in the other direction.", "correct": true},
      {"text": "A one-to-one relationship is always a self-referencing relationship.", "correct": false}
    ]
  },
  {
    "fragentext": "Choose Two \n Examine the description of the EMPLOYEES table: \n---\n | Name | Null? | Type |\n |---|---|---| \n |EMPLOYEE_ID | NOT NULL | NUMBER(6)| \n |SALARY | | NUMBER(8,2)| \n |DEPARTMENT_ID | | NUMBER(4)| \n---\n  Which two queries return the highest salary in the table?",
    "antworten": [
      {"text": "SELECT MAX(salary) \n FROM employees \n GROUP BY department_id \n HAVING MAX(salary) = MAX(MAX(salary));", "correct": false},
      {"text": "SELECT MAX(salary) \n FROM employees \n GROUP BY department_id", "correct": false},
      {"text": "SELECT MAX(salary) \n FROM employees;", "correct": true},
      {"text": "SELECT MAX(MAX(salary)) \n FROM employees \n GROUP BY department_id", "correct": true},
      {"text": "SELECT department_id, MAX(salary) \n FROM employees \n GROUP BY department_id ", "correct": false}
    ]
  },
  {
    "fragentext": "Examine this Statement: \n\n SELECT last_name \n FROM employees \n ORDER BY CASE WHEN salary = (SELECT MAX(salary) FROM employees) \n THEN 'A' \n ELSE last_name \n END, last_name DESC; \n<br> Which two statements are true? ",
    "antworten": [
      {"text": "All remaining employees names will appear in descending order.", "correct": false},
      {"text": "The names of employees earning the maximum salary will appear first in descending order.", "correct": false},
      {"text": "The Names of employees earning the maximum salary will appear first in ascending order.", "correct": false},
      {"text": "All remaining employee name will appear in ascending order.", "correct": true},
      {"text": "All remaining employee name will appear in an unspecified Order. ", "correct": false},
      {"text": "The names of employees earning the maximum salary will appear first in an unspecified order.", "correct": true}
    ]
  },
  {
    "fragentext": "Examine this statement, which executes successfully. \n\n  SELECT d.department_name, ROUND(AVG(NULLIF(e.salary,0))) AS avgsal, \n MAX(e.salary) AS maxsal \n FROM employees e \n JOIN departments d \n ON (e.department_id=d.department_id) GROUP BY d.department_name \n ORDER BY 2; \n\n In which order are the rows displayed?",
    "antworten": [
      {"text": "sorted by AVGSAL", "correct": true},
      {"text": "sorted by MAXSAL", "correct": false},
      {"text": "sorted by DEPARTMENT_NAME", "correct": false},
      {"text": "sorted by DEPARTMENT_NAME and MAXSAL", "correct": false},
      {"text": "sorted by DEPARTMEN_NAME and AVGSAL", "correct": false}
    ]
  },
  {
    "fragentext": "Which two are true?",
    "antworten": [
      {"text": "CONCAT joins two character string together.", "correct": true},
      {"text": "CONCAT joins two or more character strings together.", "correct": false},
      {"text": "INSTR finds the offset within a character string, starting from position 0.", "correct": false},
      {"text": "INSTR find the offset within a string of a single character only.", "correct": false},
      {"text": "FLOOR returns the largest positive integer less then or equal to a specified number.", "correct": false},
      {"text": "FLOOR returns the largest integer less than or equal to a specified number.", "correct": true}
    ]
  },
  {
    "fragentext": "Examine the description of the COUNTRIES table: \n---\n |Name|Null?|Type| \n |---|---|---| \n Country_ID|NOT NULL|CHAR(2)| \n |COUNTRY_NAME||VARCHAR2(40)| \n---\n Examine the description of the DEPARTMENTS table: \n---\n |Name|Null?|Type| \n |---|---|---| \n |DEPARTMENT_ID|NOT NULL|NUMBER(4)| \n |DEPARTMENT_NAME|NOT NULL|VARCHAR2(30)| \n |LOCATION_ID||NUMBER(4) \n---\n\n Examine the description of the LOCATIONS table: \n\n |Name|Null?|Type| \n |---|---|---| \n |LOCATION_ID|NOT NULL|NUMBER(4)| \n |ADDRESS||VARCHAR(140)| \n |Country_ID||CHAR(2)| \n---\n Which two queries will return a list of countries with no departments?",
    "antworten": [
      {"text": "SELECT country_id, country_name\nFROM countries\nINTERSECT\nSELECT l.country_id, c.country_name\nFROM locations l\nJOIN countries c on l.country_id = c.country_id\nJOIN departments d ON d.location_id = l.location_id;", "correct": false},
      {"text": "SELECT country_id, country_name\nFROM countries\nJOIN locations USING (country_id)\nJOIN departments USING (location_id)\nWHERE department_id IS NULL;", "correct": false},
      {"text": "SELECT country_id, country_name\nFROM countries\nWHERE country_id NOT IN (\nSELECT country_id\nFROM countries\nJOIN locations USING (country_id)\nJOIN departments USING (location_id)\n);", "correct": true},
      {"text": "SELECT country_id, country_name\nFROM countries\nMINUS\nSELECT l.country_id, c.country_name\nFROM locations l\nJOIN countries c on l.country_id=c.country_id\nJOIN departments d on d.location_id=l.location_id;", "correct": true}
    ]
  },
  {
    "fragentext": "Which three are true about system and object privileges?",
    "antworten": [
      {"text": "Adding a foreign key constraint pointing to a table in another schema requires the REFERENCES object privilege.", "correct": true},
      {"text": "WITH GRANT OPTION cannot used when granting an object privilege to PUBLIC", "correct": false},
      {"text": "Revoking an object privilege that was granted with the WITH GRANT OPTION clause has a cascading effect.", "correct": true},
      {"text": "WITH GRANT OPTION can be used when granting an object privilege to both users and roles.", "correct": false},
      {"text": "Revoking a system privilege that was granted WITH ADMIN OPTION as a cascading effect.", "correct": false},
      {"text": "Adding a primary key constraint to an existing table in another schema requires a system privilege.", "correct": true}
    ]
  },
  {
    "fragentext": "Examine the description of EMPLOYEES table:\n\n --- \n |Name|Null?|Type| \n |---|---|---| \n |EMPLOYEE_NAME|NOT NULL|VARCHAR(5)| \n |HIRE_DATE||DATE| \n |SALARY||NUMBER(7,2)| \n\n --- \n\n The session time zone is the same as the database server. \n\n Which two statements will list only the employees who have been working with the company for more than five years?",
    "antworten": [
      {"text": "SELECT employee_name FROM employees \n WHERE (SYSTIMESTAMP – hire_date) / 365 > INTERVAL '1825' DAY;", "correct": false},
      {"text": "SELECT employee_name FROM employees \n WHERE (SYSDATE – hire_date) / 12 > 5;", "correct": false},
      {"text": "SELECT employee_name FROM employees \n WHERE (CURRENT_DATE -hire_date ) / 12 > 5;", "correct": false},
      {"text": "SELECT employee_name FROM employees \n WHERE (CURRENT_DATE – hire_date) / 365 > 5", "correct": true},
      {"text": "SELECT employee_name FROM employees \n WHERE (SYSTIMESTAMP – hire_date) / 12 > INTERVAL '5' YEAR;", "correct": false},
      {"text": "SELECT employee_name FROM employees \n WHERE (SYSDATE – hire_date) / 365 > 5", "correct": true}
    ]
  },
  {
    "fragentext": "Which two statements are true about CURRENT_TIMESTAMP?",
    "antworten": [
      {"text": "The time is in the time zone of DBTIMEZONE.", "correct": false},
      {"text": "The date is in the time zone of DBTIMEZONE.", "correct": false},
      {"text": "It always returns the same value as SYSTIMESTAMP.", "correct": false},
      {"text": "It returns the same date as CURRENT_DATE", "correct": true},
      {"text": "The value varies depending on the setting of SESSIONTIMEZONE.", "correct": true},
      {"text": "It returns a value of data type TIMESTAMP.", "correct": false}
    ]
  },
  {
    "fragentext": "Which two is true about unused columns?",
    "antworten": [
      {"text": "A query can return data from unused columns, but no DML is possible on those columns.", "correct": false},
      {"text": "Unused columns retain their data until they are dropped.", "correct": true},
      {"text": "A Primary Key column cannot be set unused.", "correct": false},
      {"text": "Once a column has been set to unused, a new column with the same name can be added to the table.", "correct": true},
      {"text": "The DESCRIBE command displays unused columns.", "correct": false},
      {"text": "A foreign key column cannot be set to unused.", "correct": false}
    ]
  },
  {
    "fragentext": "Which two are true about the MERGE statement?",
    "antworten": [
      {"text": "The WHEN NOT MATCHED clause can be used to specify the deletions to be performed.", "correct": false},
      {"text": "The WHEN MATCHED clause can be used to specify the inserts to be performed.", "correct": false},
      {"text": "The WHEN MATCHED clause can be used to specify the updates to be performed.", "correct": true},
      {"text": "The WHEN NOT MATCHED clause can be used to specify the updates to be performed.", "correct": false},
      {"text": "The WHEN NOT MATCHED clause ca be used to specify the inserts to be performed.", "correct": true}
    ]
  },
  {
    "fragentext": "You and your colleague Andrew have these privileges on the EMPLOYEE_Records table: <br> 1. SELECT \n 2. INSERT \n 3. UPDATE \n 4. DELETE \n<br> You connect to the database instance and perform an update to some of the rows in EMPLOYEE_RECORDS, but do not commit yet.\n<br> Andrew connects to the database instance and queries the table. No other user accessing the table.\n <br> Which two statements are true at this point?",
    "antworten": [
      {"text": "Andrew will be able to see the changes you have made.", "correct": false},
      {"text": "Andrew will be unable to see the changes you have made.", "correct": true},
      {"text": "Andrew Will be unable to perform any INSERTS, UPDATES, or DELETES on the table.", "correct": false},
      {"text": "Andrew will be able to modify any rows in the table that have not been modified by your transaction.", "correct": true},
      {"text": "Andrew will be able to SELECT from the table, but be unable to modify any existing rows.", "correct": false}
    ]
  },
  {
    "fragentext": "You currently have an active transaction in your session and have been granted SELECT access to V$TRANSACTION. \n<br> EXECUTING:\nSELECT xid, status FROM v$transaction; \n<br> in your session returns: <br><br> \n\n |XID|Status| \n |---|---| \n |0A00070000A07000|ACTIVE| \n<br> In which three situations will re-executing this query still return a row but with different XID, indicating a new transaction has started?",
    "antworten": [
      {"text": "after successfully executing a DML statement following a failed DML statement", "correct": false},
      {"text": "after successfully executing a COMMIT or ROLLBACK followed by a DML statement", "correct": true},
      {"text": "after successfully execute a CREATE TABLE as SELECT statement followed by a SELECT FOR UPDATE statement", "correct": true},
      {"text": "after successfully executing a COMMIT or ROLLBACK followed by a SELECT statement", "correct": false},
      {"text": "after successfully executing a CREATE TABLE statement followed by a CREATE INDEX statement", "correct": false},
      {"text": "after successfully executing a TRUNCATE statement followed by a DML statement", "correct": true}
    ]
  },
  {
    "fragentext": "17",
    "antworten": [
      {"text": "AAA", "correct": false},
      {"text": "BBB", "correct": false},
      {"text": "CCC", "correct": false},
      {"text": "DDD", "correct": false},
      {"text": "EEE", "correct": false}
    ]
  }
]
